000Кодировка ASCII, Unicode, UTF-8, Byte-code.
'''ASCII (American Standard Code for Information Interchange) - это одна из самых старых и широко используемых кодировок. Она представляет каждый символ
(буквы верхнего и нижнего регистров, цифры и специальные символы) в виде 7-битного числа (0-127).

 Unicode - это стандарт, который предназначен для представления символов из всех письменных систем мира.
 Он расширяет ASCII и использует более широкий диапазон кодов для представления символов. Unicode может быть реализован различными способами кодирования, такими как UTF-8, UTF-16 и UTF-32.

UTF-8 (Unicode Transformation Format 8-bit) - это переменной длины кодировка Unicode, которая использует от 1 до 4 байтов для представления символов.
Она позволяет представлять все символы Unicode и обеспечивает обратную совместимость с ASCII.

Byte-code: Byte-code - это формат, в котором некоторые языки программирования (например, Python) компилируют свой исходный код в промежуточный код,
который затем выполняется виртуальной машиной. Byte-code обычно является платформо-независимым и может быть выполнен на разных операционных системах и архитектурах.
Промежуточный код (Intermediate code) - это форма представления программы или исходного кода, которая обычно создается в процессе компиляции программы.
 ASCII ограничен по количеству символов и не поддерживает многие символы из других письменных систем.
 Unicode и его различные кодировки, такие как UTF-8, позволяют представлять широкий набор символов, но требуют большего объема памяти для хранения символов с большими кодовыми значениями.

В Python, строки по умолчанию представлены в формате Unicode (обычно в кодировке UTF-8), что позволяет работать с текстом на разных языках и использовать различные символы


В Python строки - это последовательность символов, заключенных в одинарные, двойные или тройные кавычки. Они являются неизменяемыми, что означает, что после создания строки её нельзя изменить, а только создать новую строку с желаемым изменением.

Вот некоторые примеры строк в Python:

str1 = 'Привет, мир!'      # Одинарные кавычки
str2 = "Hello, World!"     # Двойные кавычки
str3 = '''Это строка с 
несколькими строками'''   # Тройные кавычки

print(str1)   # Выводит: Привет, мир!
print(str2)   # Выводит: Hello, World!
print(str3)   # Выводит: Это строка с
              #         несколькими строками

# Длина строки - количество символов
length = len(str1)
print(length)  # Выводит: 13


Строки в Python поддерживают различные операции, такие как конкатенация, повторение, доступ по индексу и срезы:

str1 = 'Hello'
str2 = 'World'

# Конкатенация строк (сложение)
result = str1 + ', ' + str2
print(result)  # Выводит: Hello, World

# Повторение строки
result = str1 * 3
print(result)  # Выводит: HelloHelloHello

# Доступ по индексу
char = str1[0]
print(char)    # Выводит: H

# Срезы
substring = str1[1:4]
print(substring)  # Выводит: ell


Строки в Python также поддерживают различные методы для работы с ними, такие как upper(), lower(), strip(), split() и многие другие.

str1 = 'Hello, World!'

# Методы upper() и lower() для преобразования регистра
upper_str = str1.upper()   # Преобразует все символы в верхний регистр
lower_str = str1.lower()   # Преобразует все символы в нижний регистр
print(upper_str)  # Выводит: HELLO, WORLD!
print(lower_str)  # Выводит: hello, world!

# Методы strip(), lstrip() и rstrip() для удаления пробелов
str2 = '   Python   '
strip_str = str2.strip()      # Удаляет пробелы с обоих концов строки
lstrip_str = str2.lstrip()    # Удаляет пробелы с левого конца строки
rstrip_str = str2.rstrip()    # Удаляет пробелы с правого конца строки
print(strip_str)   # Выводит: Python
print(lstrip_str)  # Выводит: Python   
print(rstrip_str)  # Выводит:    Python

# Метод split() для разделения строки на список подстрок
str3 = 'apple,banana,orange'
fruits = str3.split(',')  # Разделяет строку по запятой
print(fruits)   # Выводит: ['apple', 'banana', 'orange']

# Метод join() для объединения списка строк в одну строку
fruits_list = ['apple', 'banana', 'orange']
fruits_str = ', '.join(fruits_list)
print(fruits_str)   # Выводит: apple, banana, orange

# Поиск подстроки с помощью методов find() и index()
index1 = str1.find('World')   # Возвращает индекс первого вхождения подстроки -1
index2 = str1.index('World')  # То же, что и find(), но вызовет исключение, если подстрока не найдена
print(index1)   # Выводит: 7
print(index2)   # Выводит: 7

# Замена подстроки
new_str = str1.replace('World', 'Universe')
print(new_str)   # Выводит: Hello, Universe!


mystr = 'salamstep'

print(mystr[1])     # Выводит: 'a', так как индекс 1 соответствует символу 'a'
print(mystr[-1])    # Выводит: 'p', так как отрицательный индекс -1 обозначает последний символ строки
print(mystr[:6])    # Выводит: 'salams', так как срез от начала до индекса 6 (не включая его) вернет подстроку 'salams'
print(mystr[1:6])   # Выводит: 'alams', так как срез от индекса 1 до индекса 6 (не включая его) вернет подстроку 'alams'
print(mystr[1:6:2]) # Выводит: 'aas', так как срез от индекса 1 до индекса 6 (не включая его) с шагом 2 вернет подстроку 'aas'


mystr = 'Salam baku 2021'

mystr.isalpha()      # Возвращает True, если строка содержит только буквы алфавита
mystr.isnumeric()    # Возвращает True, если строка содержит только цифры (дробные чисел)
mystr.isdigit()	     # Возвращает True, если строка содержит только цифры
mystr.isalnum()      # Возвращает True, если строка содержит только буквы и/или цифры
mystr.isupper()      # Возвращает True, если все символы в строке в верхнем регистре
mystr.islower()      # Возвращает True, если все символы в строке в нижнем регистре
mystr.upper()        # Преобразует все символы строки в верхний регистр и возвращает новую строку
mystr.lower()        # Преобразует все символы строки в нижний регистр и возвращает новую строку
mystr.capitalize()   # Возвращает новую строку, где первый символ переведен в верхний регистр, а остальные в нижний регистр



