Python Core (УП 10.0.0)

Plan:

Алгоритм.

Понятие алгоритма.
Примеры использования алгоритмов в реальной жизни.
Типы алгоритмов: линейный, разветвлённый, циклический.
---------------------------------------------------------------------------------------

Понятие блок-схемы.

Базовые обозначения в блок-схемах.
Блок начала алгоритма.
Блок завершения алгоритма.
Блок ввода данных.
Блок вывода данных.
Блок вычислений.
Простейшие примеры использования блок-схем.
----------------------------------------------------------------------------------------
Обзор инструментов программирования для Python.

VS Code
Visual Studio
PyCharm

----------------------------------------------------------------------------------------

Понятие ESCAPE-последовательности

ESCAPE последовательность \n
ESCAPE последовательность \t
ESCAPE последовательность \"
ESCAPE последовательность \\
----------------------------------------------------------------------------------------

Комментарии
 
Что такое комментарий?
Однострочные комментарии
Примеры использования комментариев.
----------------------------------------------------------------------------------------

Переменные и типы данных

Типы данных 
Понятие типа данных. Размер, диапазон значений
Целый тип данных (int)
Вещественный тип данных (float)
Строковый тип данных (string) 
Логический тип данных (bool)
---------------------------------------------------------------------------------------
Переменная

Необходимость использования переменных
Идентификаторы
Ключевые слова
Правила именования переменных
Синтаксис создания переменной
Инициализация переменной
--------------------------------------------------------------------------------------

Организация ввода данных с консоли

--------------------------------------------------------------------------------------
Константы и литералы 
Понятие константы
Соглашение по созданию «псевдо-констант»
Понятие литерала

--------------------------------------------------------------------------------------
Операторы

Понятие оператора
Типы операторов
Арифметические операторы
Логические операторы
Операторы ветвлений
Унарные операторы
Бинарные операторы
Тернарный оператор
Оператор присваивания

-----------------------------------------------------------------------------------

Арифметические операторы 

Оператор сложения
Оператор вычитания
Оператор умножения
Сокращенные формы
-----------------------------------------------------------------------------------

Приоритеты операторов
Что такое приоритет оператора?
Таблица приоритетов операторов
-----------------------------------------------------------------------------------

Ошибки синтаксические и логические, работа с ними
Примеры построения программ с использованием блок-схем.

-----------------------------------------------------------------------------------

Преобразование типов данных 

Необходимость использования
Неявное преобразование типов
Явное преобразование типов
Примеры использования
-----------------------------------------------------------------------------------

Логические операторы

Понятие «истина»
Понятие «ложь»
Знакомство с логическими операциями
Таблица результатов применения логических операций
«Логическое отрицание». Оператор not
«Логическое И». Оператор and
«Логическое ИЛИ». Оператор or

----------------------------------------------------------------------------------

Конструкции логического выбора. Операторы ветвлений 

Оператор ветвления if
Оператор ветвления if – else
Лестница if - elif
Обозначение условий в блок-схемах. Блок условия @@Ромб, обозначающий условие @@
Обозначение объединения ветвей в блок-схемах
   _______
  |       |           
  | Начало|  
  |_______| 
      | 
      v 
   _______        
  | Ввод  | 
  |  x    | 
  |_______| 
      | 
      v 
  ________________
 |   x % 2 == 0   |   <- Блок условия
 |   (Чётное?)    |  
 |________________| 
   /        \ 
  /          \
 /            \ 
v              v 
_________   ___________
| Чётное |  | Нечётное |
| число  |  |  число   |  
|________|  |__________|
     \         /
      \       /
       \     /
        \   /
         v
      _______
     | Конец |
     |_______|

Примеры построения программ с использованием операторов ветвлений на языке блок-схем
[ Начало ]
    |
    v
[ Ввод чисел x и y ]
    |
    v
[x > y ?]    -- Условие: x больше y?
    / \
  Да/   \Нет
  /       \
 v         v
[ Вывод   | [x < y ?]    -- Следующее условие: x меньше y?
"max = x"] |    / \
            |  Да/   \Нет
            |  /       \
           v  v         v
    [ Вывод | [ Вывод   | [ Вывод
   "max = y"] | "max = x=y"] "Числа равны"]
    \       /    \       /
     v     v      v     v
   [ Конец ]    [ Конец ]

Тернарный оператор
x = 5
result = "Чётное" if x % 2 == 0 else "Нечётное"
print(result)  # Выведет "Нечётное"

---------------------------------------------------------------------------------

Циклы, использование отладчика

Циклы
Что такое цикл?
Необходимость использования циклов. Примеры использования
Цикл while
Понятие итерации
Обозначение циклов в блок-схемах. Блок цикла
Примеры построения программ с использованием циклов на языке блок-схем
Операторы break и continue
Вечный цикл
Цикл for
Вложенные циклы. Примеры использования

----------------------------------------------------------------------------------
Работа с отладчиком

Что такое отладчик. Цели и задачи отладчика
Запуск программы по шагам
Окна для работы с отладчиком. Окна переменных, локальных переменных, памяти
Исполнение одного шага
Установка точки останова (breakpoint)

----------------------------------------------------------------------------------

Строки, списки

Строки
Что такое строка?
Строка – неизменяемая последовательность символов 
Создание строк
Особенности работы со строками
Методы строк
Срез строки
Форматированный вывод
Модуль string

---------------------------------------------------------------------------------

Списки

Что такое массив?
Понятие классического массива
Понятие коллекции объектов
Что такое список?
Ссылочный тип данных list
Создание списков
Генераторы списков
Работа со списками
Методы списков
Оператор принадлежности in
Особенности списков, ссылки и клонирование
Поиск элемента

----------------------------------------------------------------------------------

Функции

Что такое функция?
Цели и задачи функции
Синтаксис объявления функций ## Параметр - это который рядом со словом def ## Аргумент - это который мы передаем при вызове
Аргументы функций
Возвращаемое значение
Ключевое слово return


Использование функций

Встроенные функции
Математические функции
Случайные числа


Область видимости

Что такое область видимости?
Что такое локальные и глобальные переменные?
Правило LEGB

###
Local (локальная область видимости)
Enclosing (область видимости окружающих функций)
Global (глобальная область видимости)
Built-in (встроенная область видимости) 

Если переменная не найдена в предыдущих областях видимости, Python проверяет встроенную область видимости. Встроенные имена предоставляются самим Python и стандартной библиотекой.
print(len("Python"))  # len - встроенная функция
###

Примеры использования


Расширенные приёмы по работе с функциями

Распаковка и упаковка аргументов
Аргументы по умолчанию
Аргументы-ключи (или именованные аргументы) 

------------------------------------------------------------------------------------

Исключения

Что такое исключение?
Типы исключений
Конструкция try except finally

Что такое try except finally?
Цели и задачи try except finally
Блок try
Блок except
Блок finally
Примеры использования

Базовые типы исключений:

BaseException
Exception
ArithmeticError
BufferError
LookupError
IndexError
KeyError
OverflowError
Другие типы исключений


Генерация исключений:

Зачем генерировать исключение?
Ключевое слово raise
Примеры использования

-------------------------------------------------------------------------------------

Файлы: 

Что такое файловая система?
Что такое директория/папка?
Что такое файл?
Какие бывают форматы файлов?
Что текстовые и бинарные файлы?
Работа с файлами в Python:
Открытие файла
Закрытие файла
Чтение файла
Запись файла
-----------------------------------------------------------------------------------
