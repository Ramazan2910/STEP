Git

# Урок 1

Добавление

!!!При таком добавлении файлы и папки находятся в стадии ожидания добавления в локальную репозиторию с помощью commit 
 

git config --global user.name "John Doe"
git config --global user.email "aloha@gmail.com" 


git add index.html -файл 
git add CSS/ - папку, также можно добавить конкретный файл из папки CSS/style.css
git add . - все файлы
git add *.html - добавит все файлы с этим расширением
* - означает что добавится все
Примеры: CSS/* - все файлы из этой папки
CSS/ *.html - все файлы с этим расширением в этой папке 

! - кроме Пример: !CSS/index.html - все файлы в этой папке кроме index.html будут добавлены

Статус 

git status - показывает твой статус и в какой ты ветке, а также показывает файлы находящиеся на стадии ожидания commit


Удаления отслеживания - удаляет файл из индекса (то есть Git больше не будет его отслеживать), но сам файл остаётся на диске.

git rm --cached index.html


Commit - переводит файлы из статусы ожидания в локальный репозиторий

git commit -m "Комментарий"

-m - это флаг, который значит что после него идет сообщение коммита


Выдает всю цепочку изменений 
git log 
git log --oneline   => выведит историю в одну строку



--------------------------------------------------------------
Gitignor файл

Сперва скажем что любой файл или папку название которого начинается с точки, (а точнее у нет названия а только расширение) является скрытым и не отображается, Gitignor файл является таким. И по названию понятно зачем он нужен в этот файл будут записыватся названия файлов которые не должны быть добавлены в локальную репозиторию (другими словами игнорироваться Git).

.gitignore

# Важно перед тем как файл будет его надо добавить в локальную репозиторию

В файле .gitignore все работает также как и в add мы можем туда записать и файл и папку или даже файлы с расширением которые будут игнорироваться. 




# Урок 2

git checkout <Id commit> => Нужный Id commit можно найти с помощью команды git log или git log --oneline

Эта команда возвращает проект на стадию commit по Id которого мы прошли (типа rollback)

# Важно не советуется менять проект при переходе к более старым версиям ибо могут произойти неполадки и историей commit



git checkout master - команда для возвращения к последней версии проекта (так скажем master ветке)



git revert <Id commit> => Id commit = git log или git log --oneline

Эта команда нужна для отмены commit по его Id (то есть действия которые выполнил этот commit будут отменены)

# Важно когда вы отменяете commit вы попадаете в редактор Vin (там не надо особо что-то прописывать).
А чтобы из него выйти надо прописать :wq




git reset <Id commit> => Id commit = git log или git log --oneline 

Эта команда удаляет все commit после commit который вы выбрали. 
К примеру:
3. Добавил папку
2. Добавил файл
1. Добавил Index.html

Если вы введем Id 2 то все commit после него а в данном случаи только 3 удаляться. Но есть важный момент при удалении commit данные в файлах проекта не меняются а остаются прежними.

А чтобы исключить такие проблемы с тем что файлы не меняются (в плане не возвращаются в состояние того commit в которой находится) надо использовать команды 

git reset <Id commit> --hard

Теперь все commit после этого удаляться и все файлы вернутся в состояния в котором они были при этом commit




#Урок 3    Ветки - используются для удобного создании проекта

git branch <Name of branch> - создание новой ветки
git checkout -b - создает и переходит на новую ветку одновременно


git checkout <Name of branch> - переход на выбранную ветку


git branch -a - вывести все ветки в проекте 


Объединение веток 

git merge <Name of branch> - объединение веток (вы должны находится в ветке которую вы хотите объединить)
 
git branch -d <Name of branch> - удаление ветки	

git branch -D <Name of branch> — принудительно удаляет ветку, даже если она не была слита.



#Урок 4 

git remote add origin <ссылка на репощиторий с гитхаба> - это команда подключает ваш репозиторий к удаленному репозиторию

origin - это переменная, которая хранит ссылку на ваш удаленный репозиторий.

git remote - для проверки подключены ли мы к удаленному репозиторию 


git push -u origin <Name of branch> - команда для отправления проекта на удаленный репозиторий


git clone <Link of repository which you want to clone> - клонирует репозиторий полностью


git pull origin main - команда для получения измененных файлов с удаленного репозиторий 


