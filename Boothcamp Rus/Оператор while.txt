Оператор while в Python используется для создания цикла, который выполняется до тех пор, пока указанное условие истинно (True). Синтаксис оператора while выглядит так:

while условие:
    # Блок кода, который выполняется, пока условие истинно


Пример использования цикла while:

# Выводим числа от 1 до 5 с помощью цикла while

i = 1
while i <= 5:
    print(i)
    i += 1


В этом примере цикл while будет выполняться до тех пор, пока переменная i меньше или равна 5. На каждой итерации цикла, число будет выводиться на экран, и переменная i увеличивается на 1 (инкремент). В результате, на экране появятся числа от 1 до 5.

Цикл while следует использовать, когда заранее неизвестно, сколько раз нужно выполнить определенный блок кода, и количество итераций зависит от условия, которое должно быть выполнено. Важно быть осторожным, чтобы избежать создания бесконечного цикла, когда условие никогда не станет ложным, и программа будет выполняться бесконечно.


Давайте рассмотрим еще один пример использования цикла while:

# Вычисляем сумму чисел от 1 до 10 с помощью цикла while

sum = 0
num = 1

while num <= 10:
    sum += num
    num += 1

print("Сумма чисел от 1 до 10 равна:", sum)


В этом примере цикл while будет выполняться до тех пор, пока переменная num не станет больше 10. На каждой итерации, значение переменной num будет прибавляться к переменной sum. Когда num станет равно 11, цикл закончится, и на экран будет выведено сообщение с суммой чисел от 1 до 10.

Цикл while особенно полезен, когда нам нужно повторять выполнение блока кода на основе условия, которое может изменяться с каждой итерацией. Однако стоит быть внимательными, чтобы избежать зацикливания программы, если условие всегда остается истинным. В таких случаях можно использовать управляющие конструкции, такие как break или continue, чтобы прервать выполнение или перейти к следующей итерации цикла.

===========================================================================

В программировании итерация относится к повторению одного и того же блока кода или операции несколько раз. В языке программирования Python итерация обычно выполняется с помощью циклов, таких как for и while.

Цикл for:
Цикл for позволяет выполнить итерацию по элементам некоторой последовательности (например, список, кортеж, строка или диапазон чисел). Каждый элемент последовательности пройдет через цикл, и блок кода будет выполнен для каждой итерации.
Пример:

fruits = ['яблоко', 'банан', 'груша']
for fruit in fruits:
    print(fruit)


В этом примере цикл for переберет каждый элемент списка fruits и выведет его на экран:

яблоко
банан
груша


Цикл while:
Цикл while выполняется, пока заданное условие истинно. Перед каждой итерацией цикл проверяет условие, и если оно истинно, выполняет блок кода. Цикл продолжает выполняться до тех пор, пока условие не станет ложным.
Пример:

count = 1
while count <= 5:
    print(count)
    count += 1


В этом примере цикл while будет выводить числа от 1 до 5:

1
2
3
4
5


Итерации позволяют повторять определенные операции или вычисления с разными значениями переменных или элементами последовательностей. Они являются важным инструментом при написании программ для обработки больших объемов данных или для выполнения однотипных задач.

===========================================================================
#################################################
#
# # if 5<7:
# #     print('step')
#
# # i = 0
# # while i<5 :
# #     print('step')
#
#
#
# # i = 8
# # i = i+1
# # i+=5
# # print(i)
#
#
# i = 36
# while i<35 :
#     if i % 3 == 0:
#         print(i)
#     i+=1
# print('baku')
#
#
# # if 8>13:
# #     print('dsfgsdg')
# # print('baku')

# num1 = int(input("Введите начало последовательности: "))
# num2 = int(input("Введите конец последовательности: "))
#
# # while num1<num2+1:
# #     print(num1)
# #     num1+=1
#
# while num1-1<num2:
#     print(num2)
#     num2-=1


i=0
while i < 5:
    print(i)
    i+=1
else:
    print('baku')










