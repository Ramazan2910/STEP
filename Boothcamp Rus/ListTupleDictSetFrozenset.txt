#Понятие классического массива.Понятие коллекции объектов.

Массив - это структура данных, состоящая из набора элементов (значений или переменных),
каждый из которых идентифицируется по крайней мере одним индексом или ключом массива.

Коллекция - структура объектов с динамически изменяющейся
размерностью массивы следует применять там, где
будет строго фиксированное оличество элементов;
если предполагается изменение количества
элементов, следует применять коллекции.

две области в оперативной памяти — стек(stack)
и кучу(heap).

Stack:
Стек используется для статичного выделения памяти.

Heap:
Куча используется для динамического выделения памяти


#Ссылочный тип данных list.

Ссылочными типами называются такие, для которых в ячейке памяти 
(ссылочной переменной) содержатся не сами данные,
 а только адреса этих данных, то есть ссылки на данные.
 
List - это ссылачный тип данных, способный хранить
некоторый набор разнатипных данных.


#Создание списков.

list_elements = [12,True,2.5,'Hello world']
print(list_elements)
list_el = [] #объявили пустой список
print(list_el)
second_list = list()
third_list = list('Hello')
print(second_list)


#Методы списков.
#https://pythontutor.com/visualize.html#mode=display
'''
append(item): добавляет элемент item в конец списка
list_el.append()

insert(index, item): добавляет элемент item в список по индексу index
list_el.insert(2, 'Python')

extend(items): добавляет набор элементов items в конец списка
list_new = [12,23,5,233,46,'hello']
list_el.extend(list_new)

remove(item): удаляет элемент item. Удаляется только первое вхождение элемента. Если элемент не найден, генерирует исключение ValueError
list_el.remove('hello')

clear(): удаление всех элементов из списка
list_el.clear()

pop(index): удаляет и возвращает элемент по индексу index. Если индекс не передан, то просто удаляет последний элемент.
a = list_el.pop(8)

index(item): возвращает индекс элемента item. Если элемент не найден, генерирует исключение ValueError
print(list_el.index(' '))

count(item): возвращает количество вхождений элемента item в список
print(list_el.count(1))

sort(reverse = False,key): сортирует элементы.
Optional. reverse=True отсортирует в обратном порядке. По умолчанию reverse=False(по возростаниө)
Optional. key - функцию сортировки.

people = ["Tom", "Bob", "Alice", "Sam", "Bill"]
people.sort()
people = ["Tom", "Alina", "bob", "alice", "Sam", "Bill" ]
people.sort(key=str.lower)

reverse(): расставляет все элементы в списке в обратном порядке

copy(): копирует список


#Nested List. Матрицы.

list_cars = [
             ['BMW',        'm-5 cs',   2023, 4.4],

             ['Rollce Royce', 'Cullina',2022, 4.5],

             ['Porshe', '       Taycan',2022, 200.5],
            ]

print(list_cars[2][1])

for i in list_cars:
    for j in i:
        print(j, end = ' ')
    print()


Списки (List) - это один из встроенных типов данных в языке программирования Python. Он представляет собой упорядоченную коллекцию элементов, которые могут быть разного типа данных. Элементы списка разделяются запятыми и заключаются в квадратные скобки [ ].

Списки (List) - это изменяемая структура данных, которая объединяет в себе упорядоченную последовательность значений, доступных по индексам. Списки позволяют обращаться к элементам по индексу, а также добавлять, изменять и удалять элементы.


Основные характеристики списка:

1 - Упорядоченность: Элементы списка упорядочены, и доступ к ним осуществляется по индексу.

2 - Изменяемость: Элементы списка можно изменять.

3 - Допустимость разных типов данных: В списке могут быть элементы разных типов данных (целые числа, строки, другие списки и т.д.).

4 - Дубликаты: В списке могут быть одинаковые элементы.

===============================================================================


Кортеж (Tuple) в Python - это упорядоченная и неизменяемая коллекция элементов. Основное отличие кортежа от списка заключается в том, что кортеж создается с помощью круглых скобок () и, после создания, его элементы нельзя изменять. Кортежи обычно используются для хранения группы связанных значений, которые не должны меняться.

my_tuple = (1, 2, 3, "hello")
tp = tuple()

Кортежи поддерживают операции индексирования, срезов и другие, но не позволяют изменять свои элементы после создания.

print(my_tuple[1]) - так можно
my_tuple[1] = "Tom" - так нельзя

Кортежи особенно полезны, когда вам нужно сохранить неизменяемый набор данных, например, координаты точки или дата.

Кортежи работают быстрее чем списки.


==============================================================================

Словарь (dictionary) в Python - это структура данных, которая представляет собой неупорядоченную коллекцию пар ключ-значение. Основное отличие словаря от списков и кортежей заключается в том, что в словаре элементы хранятся не в порядке добавления, а в соответствии с их ключами. Ключи должны быть уникальными, и они используются для доступа к значениям в словаре.

Словари создаются с использованием фигурных скобок {}. Каждая пара ключ-значение разделяется двоеточием, а пары разделяются запятыми. Вот пример создания и использования словаря:

# Создание словаря
student = {
    "name": "John",
    "age": 25,
    "major": "Computer Science"
}

# Доступ к значению по ключу
print(student["name"])  # Выводит: John
print(student["age"])   # Выводит: 25

# Добавление новой пары ключ-значение
student["gpa"] = 3.8

# Изменение значения по ключу
student["age"] = 26

# Удаление пары ключ-значение
1 - Вариант: del student["major"]

2 - Вариант удаления: 

student = {
    "name": "John",
    "age": 25,
    "major": "Computer Science"
}

student.pop("age")
print(student)



# Проверка наличия ключа в словаре
if "gpa" in student:
    print("GPA:", student["gpa"])  # Выводит: GPA: 3.8


Словари часто используются для представления структурированных данных, где каждому элементу нужно присвоить какой-либо уникальный идентификатор (ключ), например, для представления информации о пользователях, продуктах, настройках и т.д.


==========================================================================

Множество (set) в Python - это неупорядоченная коллекция уникальных элементов. Основное свойство множества состоит в том, что оно не допускает дублирования элементов. Множество может содержать разные типы данных, такие как числа, строки и даже другие множества.

fruits = {"apple", "banana", "orange"}


Основные операции со множествами:

Добавление элементов:

# Добавление элемента
fruits.add("grape")

# Добавление нескольких элементов
fruits.update(["kiwi", "pear"])


Удаление элементов:

# Удаление элемента
fruits.remove("banana")  # Если элемент не найден, возникнет ошибка

# Безопасное удаление элемента
fruits.discard("kiwi")  # Не вызывает ошибку, если элемент не найден

# Удаление и возврат последнего элемента
removed_fruit = fruits.pop()

Операции над множествами:

# Объединение множеств
all_fruits = fruits.union({"grape", "kiwi", "apple"})

# Пересечение множеств
common_fruits = fruits.intersection({"apple", "banana"})

# Разность множеств
unique_fruits = fruits.difference({"banana", "kiwi"})


Множества часто используются для удаления дубликатов из коллекций, проверки наличия элементов, выполнения математических операций над наборами данных и других сценариев, где уникальность и неупорядоченность элементов важны.

Особенности множеств:

1 - Уникальность элементов: Множество не может содержать дублирующихся элементов. Если вы добавите одинаковый элемент несколько раз, он будет сохранен только один раз.

2 - Неупорядоченность: Элементы множества не имеют определенного порядка. Это означает, что нельзя обращаться к элементам по индексу, как это делается в списках.

3 - Неизменяемость элементов: В множествах можно хранить элементы разных типов (числа, строки, кортежи), но изменяемые типы данных, такие как списки или другие множества, не могут быть элементами множества.

set - самый быстрый из коллекций.



frozenset в Python - это неизменяемая версия множества. Оно имеет те же свойства и методы, что и обычное множество, но отличается тем, что его элементы нельзя изменять после создания. frozenset полезен в случаях, когда вы хотите использовать множество как ключ в словаре или элемент в другом множестве, так как обычные множества нельзя хранить внутри других множеств или словарей из-за их изменяемости.


Основные характеристики frozenset:

1 - Неизменяемость: Элементы frozenset нельзя добавлять, удалять или изменять после его создания.

2 - Уникальность элементов: Как и обычные множества, frozenset также обеспечивает уникальность элементов.

3 - Неупорядоченность: Элементы frozenset не имеют определенного порядка, так же как и у обычных множеств.

frozenset может быть полезен, например, когда вы хотите создать ключ в словаре, состоящем из нескольких элементов, или хранить неизменяемое множество внутри другого множества.

Пример использования frozenset:

# Создаем неизменяемое множество
frozen_set = frozenset([1, 2, 3, 4])

# Попытка добавить элемент вызовет ошибку
# frozen_set.add(5)  # AttributeError: 'frozenset' object has no attribute 'add'

# Но можно использовать его в качестве ключа в словаре
my_dict = {frozen_set: "Hello"}

print(my_dict)  # Output: {frozenset({1, 2, 3, 4}): 'Hello'}


Обратите внимание, что frozenset подходит для ситуаций, когда элементы не должны изменяться после создания множества.






